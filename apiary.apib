FORMAT: 1A

# Survaider
Survaider REST API documentation.

# Group Survey and Responses
## Basic Concepts
### Data Model
Both Surveys, and Responses are stored as MongoDB documents. The Surveys are linked with the User, or Users who own the survey.

Each survey document has a `survey_id` which is MongoDB document id encoded using HashIDs for obfuscation.

The Response documents are linked to the Survey via `Survey.id`. The responses are recorded in the documents asynchroniously (**forced**, can't put the whole survey data in a go).

## API Docs

# Surveys [/api/survey]
Authentication is required to access this endpoint.

## Retrieve List of Surveys [GET]
Returns all the Surveys created by the logged-in user.

+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "r88Wnmz8NJOm2q61ZM4",
                    "name": "Demo 1",
                    "uri": "/survey/s:r88Wnmz8NJOm2q61ZM4/simple",
                    "uri_edit": "/survey/s:r88Wnmz8NJOm2q61ZM4/edit"
                },
                {
                    "id": "OLL8rLJvgzlQ38oMwdo",
                    "name": "Demo 2",
                    "uri": "/survey/s:OLL8rLJvgzlQ38oMwdo/simple",
                    "uri_edit": "/survey/s:OLL8rLJvgzlQ38oMwdo/edit"
                },
                {
                    "id": "YzzA2vJ5XA4X49Qpj4M",
                    "name": "Demo 3",
                    "uri": "/survey/s:YzzA2vJ5XA4X49Qpj4M/simple",
                    "uri_edit": "/survey/s:YzzA2vJ5XA4X49Qpj4M/edit"
                },
            ],
            "owner": "5621fdd6da1dd241bfc4db3c",
            "survey_count": 3
        }

+ Response 400 (application/json)

        {
            "error": true,
            "message": "Authentication Required"
        }

## Create a new Survaider [POST]
Creates a new Survaider.

+ Request (application/json)

        {
            "s_name": "Demo Survey Name",
            "s_desc": "Demo Survey Description"
        }

+ Response 200 (application/json)

        {
            id: "8NNaDvdGm3J1qwzDLbd"
            uri: "/survey/s:8NNaDvdGm3J1qwzDLbd"
            uri_edit: "/survey/s:8NNaDvdGm3J1qwzDLbd/edit"
        }

+ Response 400 (application/json)

        {
            "error": true,
            "message": "Authentication Required"
        }

# Survey [/api/survey/{survey_id}{?editing}]
Provides access to the Survey Resources.

+ Parameters
    + survey_id: 8NNaDvdGm3J1qwzDLbd (string)
    
        Survey ID

## Retrieve Survey Structure [GET]
Use this to get the Survey structure JSON. Note that there're two kinds of Survey Structures, one for the Game and Simple Survey, and the other one is for Survaider Builder.
Parameter `editing` is used to retrieve either.

+ Parameters

    + editing: true (string, optional)
    
        Specify `true` to get Survaider Builder compatible JSON.

+ Response 200 (application/json)

        {
            "fields": [
                {
                    "cid": "c2",
                    "field_options": [],
                    "field_type": "short_text",
                    "gametype": "text_scene",
                    "label": "What is your name?",
                    "next": {
                        "va": "c6"
                    },
                    "required": true
                },
                {
                    "cid": "c6",
                    "field_options": [
                        "Yes",
                        "No"
                    ],
                    "field_type": "yes_no",
                    "gametype": "car",
                    "label": "Have you gone on Facebook ever before?",
                    "next": {
                        "va": "c10"
                    },
                    "required": true
                },
                {
                    "cid": "c10",
                    "field_options": [
                        "Reading about friends",
                        "Chatting with friends",
                        "Finding new people",
                        "Reading (news, articles)",
                        "Shopping"
                    ],
                    "field_type": "multiple_choice",
                    "gametype": "balloon",
                    "label": "What do you primarily use Facebook for?",
                    "next": {
                        "va": "end"
                    },
                    "required": true
                }
            ],
            "game_title": "Demo Survey",
            "game_description": "Demo Description",
            "game_footer": "Demo Footer",
            "survey_id": "8NNaDvdGm3J1qwzDLbd"
        }

+ Response 404 (application/json)

        {
            "error": true,
            "message": "Survey does not Exists"
        }
        
+ Response 401 (application/json)

        {
            "error": true,
            "message": "Authentication Required"
        }

## Update Survey Structure [POST]
Use this endpoint to update the survey structure. Note that it overwrites any common parameter. Authentication Required.

+ Request (application/json)

        {
            "struct": "JSON String"
        }

+ Response 200 (application/json)

        {
            id: "8NNaDvdGm3J1qwzDLbd",
            "saved": true
        }

+ Response 400 (application/json)

        {
            "error": true,
            "message": "Authentication Required"
        }

# Responses [/api/survey/{survey_id}/response{?new}]
Provides survey responses endpoints.

+ Parameters
    + survey_id: 8NNaDvdGm3J1qwzDLbd (string)
    
        Survey ID.

    + new: true (string, optional)
    
        Specify `true` to Finish the currently running Response Session.

## Finish, or Check the status of Response Session [GET]

Use this endpoint to check the status of Response Session. The same endpoint may be used to end the response session by specifying `new` parameter in `GET` parameters.

+ Response 201 (application/json)

            {
                "response_session_running": false,
                "will_accept_response": true,
                "will_end_session": false
            }

## Append to the Response [POST]

Use this endpoint to append to Response Session. If a Response session does not exists, it'd be automatically generated.
More responses can kept on being added, and those'll be appended to the existing response document until either timeout occurs, or survey finishes.
See `GET` request with `new` parameter to learn about how to finish the running response session.

+ Request (application/json)

            {
                "q_id": "Question ID",
                "q_res": "Response to the question"
            }

+ Response 200 (application/json)

            {
                existing_response_session: true,
                new_response_session: false,
                will_add_id: "New Survey"
            }
